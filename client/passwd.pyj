# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from frames import send_action, register_handler, broadcast_action, frame_iter
from communicate import js_to_python, connect_signal

input_types = {'text', 'email', 'tel'}
username_names = {'login', 'user', 'mail', 'email', 'username', 'id', 'identification', 'login_email', 'login_id', 'login_username'}


def password_changed(ev):
    pw = ev.currentTarget
    pwd = pw.value
    if pwd:
        pw.dataset.viseLastPasswordValue = pwd

def form_submitted(ev):
    form = ev.target
    u, p = get_login_inputs(form)
    if u:
        username = u.value
    if p:
        # We only use an explicitly typed in password, as some websites
        # modify/hash the value in the password field before submitting
        password = p.dataset.viseLastPasswordValue
    send_action(window.top, 'login_form_submitted', document.location.href, username, password)

def get_login_inputs(form):
    username = password = None
    if form.querySelectorAll:
        for inp in form.querySelectorAll('input'):
            if username is not None and password is not None:
                break
            itype = str.lower(inp.getAttribute('type') or '')
            if itype is 'password':
                password = inp
            elif itype in input_types:
                name = str.lower(inp.name or inp.id or '')
                if name in username_names or str.endswith(name, '_username'):
                    username = inp
    return username, password

def submit_form(form):
    buttons = list(form.querySelectorAll('button[type=submit]'))
    inputs = list(form.querySelectorAll('input[type=submit]'))
    if buttons.length:
        buttons[-1].click()
    elif inputs.length:
        inputs[-1].click()
    else:
        form.submit()

def is_login_form(form):
    un, pw = get_login_inputs(form)
    return un is not None or pw is not None

def login_form_found(current_frame_id, source_frame_id, source_frame, url):
    js_to_python('login_form_found_in_page', url)

def login_form_submitted(current_frame_id, source_frame_id, source_frame, url, username, password):
    js_to_python('login_form_submitted_in_page', url, username, password)

def on_autofill_login_form(url, autosubmit, is_current_form):
    if not do_autofill(url, autosubmit, is_current_form):
        broadcast_action(frame_iter(window.self), 'autofill_login_form', url, autosubmit, is_current_form)


def on_form_field_filled(url, which):
    if not do_form_field_filled(url, which):
        broadcast_action(frame_iter(window.self), 'form_field_filled', url, which)


def form_field_filled(current_frame_id, source_frame_id, source_frame, url, which):
    do_form_field_filled(url, which)


def autofill_login_form(current_frame_id, source_frame_id, source_frame, url, autosubmit, is_current_form):
    do_autofill(url, autosubmit, is_current_form)


def request_form_field_fill(which, element, url):
    element.focus()
    element.value = ''
    br = element.getBoundingClientRect()
    js_to_python('fill_form_field_for', url, which, br.left, br.top, br.right, br.bottom)


def do_autofill(url, autosubmit, is_current_form):
    if url is not document.location.href:
        return False
    candidates = v'[]'
    if is_current_form and document.activeElement and document.activeElement.tagName.toLowerCase() is 'input':
        c = document.activeElement
        if c and str.lower(c.tagName) is 'input':
            while c.parentNode:
                c = c.parentNode
                if str.lower(c.tagName) is 'form':
                    candidates.push(c)
                    break
    else:
        for form in document.querySelectorAll('form'):
            if is_login_form(form):
                candidates.push(form)

    if candidates.length > 0:
        candidates.sort(def (f1, f2):
                        return f1.getBoundingClientRect().width - f2.getBoundingClientRect().width
        )
        found_form = candidates[-1]
        found_form.dataset.viseAutosubmit = '1' if autosubmit else '0'
        un, pw = get_login_inputs(found_form)
        if un is not None and not un.dataset.viseFilled:
            un.dataset.viseFilled = '1'
            request_form_field_fill('username', un, url)
        elif pw:
            request_form_field_fill('password', pw, url)
        return True
    return False


def do_form_field_filled(url, which):
    form = None
    c = document.activeElement
    if c and str.lower(c.tagName) is 'input':
        while c.parentNode:
            c = c.parentNode
            if str.lower(c.tagName) is 'form':
                form = c
                break
    if not form:
        return
    if which is 'username':
        pw = get_login_inputs(form)[1]
        if pw is not None and not pw.dataset.viseFilled:
            pw.dataset.viseFilled = '1'
            request_form_field_fill('password', pw, url)
        else:
            do_form_field_filled(url, 'password')
    elif which is 'password':
        if form.dataset.viseAutosubmit is '1' and form.getBoundingClientRect().width > 0:
            # Only submit rendered forms
            submit_form(form)


current_login_form_request_id = 0

def on_get_url_for_current_login_form():
    nonlocal current_login_form_request_id
    current_login_form_request_id += 1
    if document.activeElement and str.lower(document.activeElement.tagName) is 'input':
        send_action(window.top, 'send_url_for_current_login_form', current_login_form_request_id, document.location.href)
    else:
        broadcast_action(frame_iter(window.self), 'get_url_for_current_login_form_in_subframe', current_login_form_request_id)

def get_url_for_current_login_form_in_subframe(current_frame_id, source_frame_id, source_frame, request_id):
    if document.activeElement and document.activeElement.tagName.toLowerCase() is 'input':
        send_action(window.top, 'send_url_for_current_login_form', request_id, document.location.href)

def send_url_for_current_login_form(current_frame_id, source_frame_id, source_frame, request_id, url):
    nonlocal current_login_form_request_id
    if request_id is current_login_form_request_id:
        current_login_form_request_id += 1
        js_to_python('url_for_current_login_form', url)

def onload():
    if window is window.top:
        register_handler('login_form_found', login_form_found)
        register_handler('login_form_submitted', login_form_submitted)
        register_handler('send_url_for_current_login_form', send_url_for_current_login_form)
        connect_signal('autofill_login_form', on_autofill_login_form)
        connect_signal('form_field_filled', on_form_field_filled)
        connect_signal('get_url_for_current_login_form', on_get_url_for_current_login_form)
    else:
        register_handler('autofill_login_form', autofill_login_form)
        register_handler('form_field_filled', form_field_filled)
        register_handler('get_url_for_current_login_form_in_subframe', get_url_for_current_login_form_in_subframe)
    login_forms_found = False
    for form in document.querySelectorAll('form'):
        if is_login_form(form):
            pw = get_login_inputs(form)[1]
            if pw:
                pw.addEventListener('input', password_changed, True)
            form.addEventListener('submit', form_submitted, True)
            login_forms_found = True
            break
    if login_forms_found:
        send_action(window.top, 'login_form_found', document.location.href)
